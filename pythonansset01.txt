s = raw_input()
n = map(int, s.split())
print n


1.
li=[]
x=int(input("enter x"))
li.append(x)
y=int(input("enter y"))
li.append(y)
z=int(input("enter z"))
li.append(z)
print(li)
l=[a for a in li if x%2!=0 and y%2!=0 and z%2!=0]
if (l!=[]):
    print(max(l))
else:
    print("no odd numbers found")

o/p:
Python 3.6.1 (default, Dec 2015, 13:05:11)
[GCC 4.8.2] on linux
enter x 5
enter y 9
enter z 27
[5, 9, 27]
27


2.
def right_justify(string):
   print(string.rjust(70))
right_justify("Cigna")

o/p:
Python 3.6.1 (default, Dec 2015, 13:05:11)
[GCC 4.8.2] on linux

   Cigna


3.
li=[] 
for i in range (10):
    x=int(input("enter no. \n")) 
    li.insert(i,x)
    i+=1
print(li)
l=[a for a in li if a%2!=0]

if (l!=[]):
    print(max(l))
else:
    print("no odd numbers found")

o/p:
Python 3.6.1 (default, Dec 2015, 13:05:11)
[GCC 4.8.2] on linux
enter no.
1
enter no.
2
enter no.
3
enter no.
4
enter no.
5
enter no.
6
enter no.
27
enter no.
57
enter no.
107
enter no.
223
[1, 2, 3, 4, 5, 6, 27, 57, 107, 223]
223

or

li=list(map(int,input().split()))
print(li)
l=[a for a in li if a%2!=0]
if (l!=[]):
    print(max(l))
else:
    print("no odd numbers found")

o/p:
Python 3.6.1 (default, Dec 2015, 13:05:11)
[GCC 4.8.2] on linux
3 5 7 9 15 27 89 14 123 50
[3, 5, 7, 9, 15, 27, 89, 14, 123, 50]
123


4.Practice using the Python interpreter as a calculator:

4a-
import math
r=int(input("enter the radius"))
v=(4.0/3.0)*3.14*(r*r*r)
print(v)

o/p:
Python 3.6.1 (default, Dec 2015, 13:05:11)
[GCC 4.8.2] on linux
enter the radius 5
523.3333333333334


4b-
cp=24.95
d=0.40
s=3
a=0.75
ocp=cp*d
print("the total cost is",(ocp+s)+(59*(ocp+a)))

o/p:
Python 3.6.1 (default, Dec 2015, 13:05:11)
[GCC 4.8.2] on linux
the total cost is 646.0500000000001


4c.
s=1

h=s/(60*60)
s=s-h*60*60

m=s/60
s=s-m*60

st=6*h+52*m
easy=2*(8*m+15*s)
fast=3*(7*m+12*s)
total=st+easy+fast
print("total run time:",total,"hours",h,"minutes",m,"seconds",s)

o/p: 
Python 3.6.1 (default, Dec 2015, 13:05:11)
[GCC 4.8.2] on linux
total run time: 0.0016666666666666666 hours 0.0002777777777777778 minutes 0.0 seconds 0.0


5.
n=int(input("ENTER AN INTEGER"))
for i in range(1,6): 
  root=n**(1/i) 
  if(int(root)**i==n): 
     p=i 
     print("root is:",root) 
     print("power is:",p) 

o/p:
[GCC 4.8.2] on linux
ENTER AN INTEGER 9
root is: 9.0
power is: 1
root is: 3.0
power is: 2


6.
s="1.0,2.0,3.0,4.0,5.0"
li=s.split(',')
print (li)
s=0
for i in li:
  s=s+float(i)
print (s)

o/p:
[GCC 4.8.2] on linux
['1.0', '2.0', '3.0', '4.0', '5.0']
15.0


7.
def isln(a,b):
 if a in b or b in a:
   return True
 else:
   return False
x="hellop"
y="hello"
print(isln(x,y))


o/p:
Python 3.6.1 (default, Dec 2015, 13:05:11)
[GCC 4.8.2] on linux
True


8.
vect3=[]
def getRatios(vect1,vect2):
    for i in range(0,len(vect1)):
      vect3.append(vect1[i]/vect2[i])
    return vect3
try:
    print(getRatios([2,4,6],[1,2,3]))
except:
    print("caught the exception")
else:
    print("working")
finally:
    print("finally")

o/p:
Python 3.6.1 (default, Dec 2015, 13:05:11)
[GCC 4.8.2] on linux
[2.0, 2.0, 2.0]
working
finally


10.
x = -25
epsilon = 0.01
numGuesses = 0
low = 0.0
high = max(1.0, x)
ans = (high + low)/2.0

while abs(ans**2 - x) >= epsilon:
  print ('low =', low, 'high =', high, 'ans =', ans)
  numGuesses += 1
  if ans**2 < x:
    low = ans
  else:
    high = ans
    ans = (high + low)/2.0
print ('numGuesses =', numGuesses)
print (ans, 'is close to square root of', x)



9.
width = 17
height = 12.0
delimiter = '.' 

print (width/2)

